df=pd.read_csv('data/raw_data.csv')

df.info()
df.head()
df.describe()
df.isnull().sum()

Features: 50000 entries * 12 features
1) Numerical: avg_dist, avg_rating_by_driver, avg_rating_of_driver, avg_surge, 
              weekday_pct, surge_pct, trips_in_first_30_days 
2) Categorical: city, phone
3) Boolean: luxury_car_user 
4) Timestamp: last_trip_date, signup_date 

EDA:
1) Numerical variables
   df[''].plot.hist(bins=)
   scatter plot: pandas.plotting -> scatter_matrix
2) Categorical
   df[''].value_counts()
   df[''].value_counts(dropna=False).plot.bar()
3) Boolean
4) Timestamp

Missing data features:
1) avg_rating_by_driver
2) avg_rating_of_driver  
3) phone
   (1) df_dropna=df.dropna(axis=0)
   (2) df_fillna=df.copy()
       df_fillna['phone']=df['phone'].fillna('no_phone')
       df_fillna['']=df[''].fillna(df[''].median())
       
Transform data:
1) Time-series variables
resample: Convenience method for frequency conversion and resampling of time series. 
   df['']=pd.to_datetime(df[''])
   df_timestamp=df[['','']].copy
   df_timestamp['count']=1
   
   df_timestamp=df_timestamep.set_index('signup_date')
   df_timestamp['count'].resample("1D").sum()

   df_timestamp = df_timestamp.set_index('last_trip_date')
   df_timestamp['count'].resample("1D").sum().plot()
   
   Weekday VS Weekend:
   date_in_datetime=pd.to_datetime()
   date_in_datetime.dayofweek
   df['dayofweek']=df[''].apply(lambda x: x.dayofweek)
   
2) Converting categorical variables, encode to numeric values
   Encode categorical columns to numeric values
   col_category=['','','']
   df_dummies=pd.get_dummies(df['col_category'],columns=col_category)
   df=df.join(df_dummies)
  
3) Convert bool into int (TRUE/FALSE -> 1/0)
   df['']=df[''].astype(int)
   
Define a label/target/outcome: How to define a Churn! 
Eg: if the number of days between xx/xx/xxxx and last trip date was greater than 30, then user is categorized as "churned".
In practice, you will often have to figure out how to generate a reasonable label to train your dataset. 
Is the cutoff of 30 days reasonable?  You may want to test this... 
Sometimes, the correct label is even less obvious; your ability to make a sensible (and defensible) decision in these cases is important.
Add churn indicator AND Define churn: users did not take a trip during last 30 days, i.e. last trip date is earlier than 2014-06-01
   df['churn'] = (df.last_trip_date < pd.to_datetime('2014-06-01')) * 1
   df['active'] = (df.last_trip_date >= pd.to_datetime('2014-06-01')) * 1
   df['churn'].mean()
   df['active'].mean()
   
EDA with label:
1) general relationship with label
   colors = ['red' if ix else 'blue' for ix in df['active']]
   scatter_matrix(df[['avg_dist', 'avg_rating_by_driver', 'avg_rating_of_driver', 'avg_surge', 'surge_pct', 
          'trips_in_first_30_days', 'weekday_pct']], alpha=0.2, figsize=(16, 16), diagonal='hist', c=colors)
   plt.show()
2) churn rate VS city
   df[['city','churn']].groupby(['city']).mean().plot().bar()
3) churn rate VS phone
   df[['phone','churn']].groupby(['city']).mean().plot().bar()
4) churn rate VS luxury_car_user
   df[['luxury_car_user', 'active']].groupby(['luxury_car_user']).mean().plot.bar()
5) churn rate VS trip in the first 30 days
   df[['trips_in_first_30_days', 'active']].groupby(['active']).mean().plot.bar()
6) split churn condition: 
   is_active = df['active'] == 1  ->> True/False
   df[is_active] =>> df[df['active']==1]
   
   fig, axes = plt.subplots(nrows=1, ncols=2)
   axes[0].hist(df[is_active]['avg_dist'].values)
   axes[1].hist(df[~is_active]['avg_dist'].values)
   fig.tight_layout()
   plt.show()
 
 Abstract out the plotting machine:
 #
    def hist_active_vs_churn(df, col_name):
    is_active = df['active'] == 1
    fig, axes = plt.subplots(nrows=1, ncols=2)
    axes[0].hist(df[is_active][col_name].values)
    axes[0].set_title("active users")
    axes[0].set_xlabel(col_name)
    axes[0].set_ylabel("counts")
    
    axes[1].hist(df[~is_active][col_name].values)
    axes[1].set_title("churned users")
    axes[1].set_xlabel(col_name)
    axes[1].set_ylabel("counts")
    fig.tight_layout()
    plt.show()
  #
  hist_active_vs_churn(df, col_name='avg_rating_by_driver')
  
  cols = ['avg_dist', 'avg_rating_by_driver', 'avg_rating_of_driver', 'avg_surge']
  for col in cols:
      hist_active_vs_churn(df, col_name=col)
      
  df.groupby('active')['avg_rating_by_driver'].agg(['mean','count'])
   
   
Save cleaned data:
   selected_columns = ['avg_dist', 'avg_rating_by_driver', 'avg_rating_of_driver', 'avg_surge', 
                     'surge_pct', 'trips_in_first_30_days', 'luxury_car_user', 
                     'weekday_pct', 'city_Astapor', 'city_King\'s Landing','city_Winterfell', 
                     'phone_Android', 'phone_iPhone', 'phone_no_phone', 'signup_dow_0', 
                     'signup_dow_1', 'signup_dow_2', 'signup_dow_3', 'signup_dow_4', 
                     'signup_dow_5', 'signup_dow_6', 'churn']
   cleaned_data_csv = 'data/cleaned_data.csv'
   df[selected_columns].to_csv(cleaned_data_csv, index=False)


Build Model:
   Train-Test Split
   
